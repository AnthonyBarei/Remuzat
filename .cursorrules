# Remuzat Booking System - Cursor Rules

## Project Overview
This is a Laravel 9 + React + TypeScript booking system for a beautiful village called Remuzat. Users can book holidays (currently the only booking type) with a beautiful calendar interface. The system includes a landing page and a protected booking area.

## Tech Stack
- **Backend**: Laravel 9 with Sanctum authentication
- **Frontend**: React 18 + TypeScript + Material-UI + Vite
- **Database**: MySQL/PostgreSQL
- **Styling**: Material-UI (MUI) with custom theming

## Code Standards

### Laravel Backend
- Use Laravel naming conventions (snake_case for DB, camelCase for methods)
- Always validate input data in controllers
- Use Eloquent relationships properly
- Return consistent API responses using BaseController
- Use proper HTTP status codes (200, 201, 400, 401, 403, 404, 422, 500)
- Always handle exceptions with try-catch blocks
- Use Laravel's built-in validation rules
- Implement proper authorization checks (users can only access their own data)

### Email System
- Use EmailService for centralized email sending logic
- Always handle email exceptions gracefully (don't fail user actions if email fails)
- Use queue-based notifications for better performance
- Follow consistent email template structure with Remuzat branding
- Include proper error logging for email failures
- Use French language for all user-facing email content
- Test email functionality with artisan commands

### React Frontend
- Use TypeScript for all components
- Use functional components with hooks
- Follow Material-UI design patterns
- Use proper TypeScript interfaces for all data structures
- Handle loading states and error states properly
- Use async/await for API calls
- Implement proper form validation
- Use React Context for global state management (auth, theme)
- Display error messages in modals and forms
- Handle overlap warnings and admin notifications

### File Structure
```
app/
├── Http/Controllers/Api/     # API controllers
├── Models/                   # Eloquent models
├── Http/Resources/           # API resources
├── Http/Middleware/          # Custom middleware
├── Mail/                     # Mail classes
├── Services/                 # Service classes (EmailService)
└── Notifications/            # Notification classes

resources/js/
├── components/               # React components
│   ├── Booking/             # Booking-related components
│   ├── Layouts/             # Layout components (Appbar, LandingNavbar)
│   ├── Pages/               # Page components (Auth, Landing)
│   └── Routes/              # Route components
├── context/                 # React context (auth, theme)
└── types/                   # TypeScript type definitions

resources/views/emails/       # Email templates
```

## Business Rules

### Booking System
- Users can only create, view, and cancel their own bookings
- Admins can manage all bookings (approve, modify, delete)
- Bookings have states: pending, approved, cancelled
- **Smart Overlap Management**:
  - Users cannot overlap their own reservations
  - Users can overlap other users' reservations (requires admin validation)
  - Overlapping bookings are marked as "pending" for admin review
  - Visual indicators show overlapping bookings in admin interface
  - Admin warnings include specific user names for overlaps
- Currently only supports "booking" type (holidays)
- Multi-day bookings are supported with visual indicators
- Bookings appear immediately after creation

### User Management
- Users can customize their color preference
- Users can access account parameters
- Admin users have special privileges with policy-based authorization
- Authentication uses Laravel Sanctum
- Admins can authorize users, delete users, and resend validation emails
- User email verification status is tracked and displayed
- **Two-step validation process**: Email verification + admin validation
- **Email notifications**: Users receive validation confirmation emails
- **Admin notifications**: Admins receive notifications for new users and bookings

### UI/UX Guidelines
- Use consistent color scheme based on user preferences
- Implement dark/light theme support
- Show loading states appropriately (but not on individual calendar columns)
- Provide clear success/error feedback
- Use Material-UI components consistently
- Responsive design for all screen sizes
- Smooth transitions and animations

### Routing Structure
- `/` - Landing page (public)
- `/reservation` - Booking system (protected)
- `/admin` - Admin panel (protected, admin only)
- `/login` - Login page (redirects to /reservation after auth)
- `/signup` - Registration page (redirects to /reservation after auth)

## API Endpoints

### User Endpoints
- `GET /api/reservations` - List user's bookings (with week filtering)
- `POST /api/reservations` - Create booking
- `PUT /api/reservations/{id}` - Update booking
- `DELETE /api/reservations/{id}` - Cancel booking
- `GET /api/user/profile` - Get user profile
- `PUT /api/user/profile` - Update user profile
- `POST /api/register` - User registration
- `POST /api/login` - User login
- `POST /api/logout` - User logout

### Admin Endpoints
- `GET /api/admin/reservations` - List all bookings (with filtering, pagination, overlap detection)
- `PUT /api/admin/reservations/{id}` - Admin update booking (with overlap warnings)
- `POST /api/admin/reservations/{id}/approve` - Approve booking
- `POST /api/admin/reservations/{id}/reject` - Reject booking
- `GET /api/admin/reservations/statistics` - Get booking statistics
- `GET /api/users` - List all users
- `PUT /api/users/{id}` - Update user
- `DELETE /api/users/{id}` - Delete user
- `POST /api/users/{id}/authorize` - Authorize user (sends validation email)
- `POST /api/users/{id}/resend-validation` - Resend validation email

### Email Endpoints
- `POST /api/email/verify` - Verify email address
- `POST /api/email/resend` - Resend verification email
- `POST /api/forgot-password` - Request password reset
- `POST /api/reset-password` - Reset password with token

## Security
- All booking endpoints require authentication
- Users can only access their own data
- Admins can access all data with policy-based authorization
- Validate all input data
- Use CSRF protection for web routes
- Use Sanctum tokens for API authentication
- Proper authorization checks in controllers and policies
- Admin routes protected by AdminPolicy middleware

## Performance
- Use eager loading for relationships
- Implement proper database indexing
- Use pagination for large datasets
- Optimize React component rendering
- Use proper caching strategies
- Load bookings overlapping the selected week for better UX

## Testing
- Write unit tests for models
- Write feature tests for API endpoints
- Test user permissions and authorization
- Test booking validation rules
- Test UI interactions
- Test booking overlap prevention

## Deployment
- Use environment variables for configuration
- Implement proper logging
- Use database migrations
- Set up proper error monitoring
- Configure proper CORS settings
- Build frontend assets for production

## Current Features
- ✅ Landing page with hero section and navigation
- ✅ User authentication (register/login/logout)
- ✅ Week-based calendar interface
- ✅ Booking creation with validation
- ✅ Booking cancellation (user's own pending bookings)
- ✅ Multi-day booking support
- ✅ Real-time UI updates
- ✅ Dark/light theme support
- ✅ User color preferences
- ✅ Responsive design
- ✅ Loading states and error handling
- ✅ **Complete Email System**:
  - Email verification for new users
  - Password reset functionality
  - Admin notifications for new bookings and users
  - User validation confirmation emails
  - Professional email templates with Remuzat branding
- ✅ **Complete Admin Panel**:
  - User management (view, edit, delete, authorize, resend validation)
  - Reservation management (view, edit, approve, reject)
  - Statistics dashboard
  - Advanced filtering and pagination
- ✅ **Smart Overlap Management**:
  - Users cannot overlap their own reservations
  - Users can overlap other users' reservations (admin validation required)
  - Visual overlap indicators in admin interface
  - Admin warnings with specific user names
  - Overlap filtering options
- ✅ **Policy-based Authorization**:
  - AdminPolicy for booking and user management
  - AdminPolicyMiddleware for route protection
  - Granular permissions for different admin actions

## Future Enhancements
- Additional booking types (meetings, vacations)
- Advanced filtering and search
- Calendar export functionality
- Payment integration
- Booking analytics and reporting
- Bulk operations for admin
- Email templates for additional notifications
- Push notifications
- SMS notifications 